const schedule = require("node-schedule");
const Appointment = require("../models/Appointment");
const { db } = require("../config/firebase");

const scheduledJobs = new Map();

function scheduleAppointmentJob(appointment, callback) {
  const { _id, date, startTime } = appointment;

  const dateTime = new Date(`${date}T${startTime}`);
  if (dateTime < new Date()) return; // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ, —è–∫—â–æ —á–∞—Å —É–∂–µ –º–∏–Ω—É–≤

  console.log(`üìÖ –ü–ª–∞–Ω—É—î–º–æ –ø–æ–¥—ñ—é –¥–ª—è appointment ${_id}`);
  console.log(
    `üïì –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –Ω–∞: ${dateTime.toISOString()} (–ª–æ–∫–∞–ª—å–Ω–∏–π —á–∞—Å: ${dateTime.toLocaleString()})`
  );

  const job = schedule.scheduleJob(dateTime, async () => {
    console.log(`üö® –ß–∞—Å –ø—Ä–∏–π–æ–º—É –Ω–∞—Å—Ç–∞–≤ –¥–ª—è appointment ${_id}`);

    try {
      const callRef = db.collection("calls").doc();

      await callRef.set({
        appointmentId: _id.toString(),
        createdAt: new Date().toISOString(),
      });

      console.log(`‚úÖ WebRTC –∫—ñ–º–Ω–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞: calls/${callRef.id}`);

      // üü° –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π appointment –∑ –±–∞–∑–∏
      const freshAppointment = await Appointment.findById(_id);

      // üü¢ –ü–µ—Ä–µ–¥–∞—î–º–æ –π–æ–≥–æ –≤ callback –∑ firestoreCallId
      if (freshAppointment) {
        callback({
          ...freshAppointment.toObject(),
          firestoreCallId: callRef.id,
        });
      } else {
        console.error(
          "‚ùå Appointment –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –º–æ–º–µ–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è WebRTC-–∫—ñ–º–Ω–∞—Ç–∏"
        );
        callback(null);
      }
    } catch (err) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ WebRTC –∫—ñ–º–Ω–∞—Ç–∏:", err);
      callback(null);
    }

    scheduledJobs.delete(_id.toString());
  });

  scheduledJobs.set(_id.toString(), job);
  console.log(`‚úÖ –ü–æ–¥—ñ—é –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ: appointment ${_id}`);
}

function cancelScheduledJob(appointmentId) {
  const job = scheduledJobs.get(appointmentId);
  if (job) {
    job.cancel();
    scheduledJobs.delete(appointmentId);
  }
}

// üü° –ü–ª–∞–Ω—É—î–º–æ –≤—Å—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ –∞–ø–æ—ñ–Ω—Ç–º–µ–Ω—Ç–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞
async function rescheduleAllAppointments(io) {
  try {
    const now = new Date();
    const appointments = await Appointment.find({
      status: "confirmed",
      $expr: {
        $gt: [
          {
            $dateFromString: {
              dateString: { $concat: ["$date", "T", "$startTime"] },
            },
          },
          now,
        ],
      },
    });

    console.log(
      `–ó–Ω–∞–π–¥–µ–Ω–æ ${appointments.length} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏—Ö –∞–ø–æ—ñ–Ω—Ç–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è`
    );

    for (const appt of appointments) {
      const chatId = null;
      scheduleAppointmentJob(appt, (readyAppt) => {
        const payload = {
          message: "–í–∞—à –ø—Ä–∏–π–æ–º –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è!",
          appointmentId: readyAppt._id,
          chatId: chatId,
          firestoreCallId: readyAppt.firestoreCallId || null,
        };

        const users = require("../socket").getIoUsers();

        const patientSocketId = users.get(readyAppt.patient.toString());
        const doctorSocketId = users.get(readyAppt.doctor.toString());

        if (patientSocketId)
          io.to(patientSocketId).emit("appointmentStart", payload);
        if (doctorSocketId)
          io.to(doctorSocketId).emit("appointmentStart", payload);
      });
    }
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–ª–∞–Ω—É–≤–∞–Ω–Ω—ñ –∞–ø–æ—ñ–Ω—Ç–º–µ–Ω—Ç—ñ–≤:", error);
  }
}

module.exports = {
  scheduleAppointmentJob,
  cancelScheduledJob,
  rescheduleAllAppointments,
};
